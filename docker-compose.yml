version: '3.7'

services:
  sql-server:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sql-server
    user: root
    ports:
      - "1433:1433"
    environment:
      - "SA_PASSWORD=Tn2o80-C16@"
      - ACCEPT_EULA=Y
    volumes:
      - sql-data:/var/opt/mssql/data
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-U", "sa", "-P", "Tn2o80-C16@", "-Q", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - cfc-netwoek

  init:
    image: mcr.microsoft.com/mssql-tools
    volumes:
      - ./initdb:/usr/config
    command: /opt/mssql-tools/bin/sqlcmd -S sql-server -U sa -P 'Tn2o80-C16@' -i /usr/config/criar-banco.sql
    depends_on:
      - sql-server
    networks:
      - cfc-netwoek

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

    healthcheck:
      test: ["CMD", "echo", "ruok"]  
      interval: 10s  
      retries: 3 
      timeout: 5s  
    networks:
      - cfc-netwoek

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "9092"]
      interval: 10s
      retries: 3
      timeout: 5s
    networks:
      - cfc-netwoek

  criar-topico:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >
      sh -c "/usr/bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic produto"
    networks:
      - cfc-netwoek

  # Backend Quarkus
  backend:
    build:
      context: ./back-end/
      dockerfile: Dockerfile
    # ports:
    #   - "8080:8080"
    depends_on:
      - sql-server
      - kafka
    networks:
      - cfc-netwoek

  # Frontend Vue.js
  frontend:
    build:
      context: ./front-end/cfc-test/
      dockerfile: Dockerfile
    # ports:
    #   - "3000:80"
    networks:
      - cfc-netwoek
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Servidor Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - cfc-netwoek
    depends_on:
      - backend
      - frontend    

networks:
  cfc-netwoek:
    driver: bridge    
    
volumes:
  sql-data:
